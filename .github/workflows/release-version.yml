name: Release Version

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'The version of cloud'
        required: false
        default: ''
      kubeblocks_version:
        description: 'The version of kubeblocks'
        required: false
        default: ''
      gemini_version:
        description: 'The version of gemini'
        required: false
        default: ''
      oteld_version:
        description: 'The version of oteld'
        required: false
        default: ''
      installer_version:
        description: 'The version of offline installer'
        required: false
        default: ''
      dms_version:
        description: 'The version of dms'
        required: false
        default: ''

run-name: ref_name:${{ github.ref_name }} cloud:${{ inputs.release_version }} kubeblocks:${{ inputs.kubeblocks_version }} gemini:${{ inputs.gemini_version }} oteld:${{ inputs.oteld_version }} installer:${{ inputs.installer_version }} dms:${{ inputs.dms_version }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  release-version:
    runs-on: ubuntu-latest
    steps:
      - name: checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v4

      - name: Update version
        id: update_version
        run: |
          commit_message="chore: upgrade"
          update_version_cmd="bash .github/scripts/upgrade_version.sh --type 1 "
          if [[ -n "${{ inputs.release_version }}" ]]; then
              update_version_cmd="${update_version_cmd} --cloud-version ${{ inputs.release_version }} "
              commit_message="${commit_message} cloud ${{ inputs.release_version }}"
          fi
          
          if [[ -n "${{ inputs.kubeblocks_version }}" ]]; then
              update_version_cmd="${update_version_cmd} --kubeblocks-version ${{ inputs.kubeblocks_version }} "
              commit_message="${commit_message} kubeblocks ${{ inputs.kubeblocks_version }}"
          fi
          
          if [[ -n "${{ inputs.gemini_version }}" ]]; then
              update_version_cmd="${update_version_cmd} --gemini-version ${{ inputs.gemini_version }} "
              commit_message="${commit_message} gemini ${{ inputs.gemini_version }}"
          fi
          
          if [[ -n "${{ inputs.oteld_version }}" ]]; then
              update_version_cmd="${update_version_cmd} --oteld-version ${{ inputs.oteld_version }} "
              commit_message="${commit_message} oteld ${{ inputs.oteld_version }}"
          fi
          
          if [[ -n "${{ inputs.installer_version }}" ]]; then
              update_version_cmd="${update_version_cmd} --installer-version ${{ inputs.installer_version }} "
              commit_message="${commit_message} installer ${{ inputs.installer_version }}"
          fi
          
          if [[ -n "${{ inputs.dms_version }}" ]]; then
              update_version_cmd="${update_version_cmd} --dms-version ${{ inputs.dms_version }} "
              commit_message="${commit_message} dms ${{ inputs.dms_version }}"
          fi
          
          FILE_CHANGES=`git diff --name-only ${{ github.sha }}`
          if [[ ! -z "$FILE_CHANGES" ]]; then
              echo $FILE_CHANGES
              git config --local user.name "$GITHUB_ACTOR"
              git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
              git commit -a -m "${commit_message}"
          fi
          echo file_changes=$FILE_CHANGES >> $GITHUB_OUTPUT
          
          RELEASE_COMMIT="$(git rev-parse HEAD)"
          echo 'RELEASE_COMMIT='${RELEASE_COMMIT} >> $GITHUB_ENV


      - name: push addons version changes to new branch
        if: ${{ steps.update_version.outputs.file_changes }}
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ github.ref }}
          github_token: ${{ env.GITHUB_TOKEN }}

      - name: push tag ${{ inputs.release_version }}
        if: ${{ inputs.release_version }}
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ inputs.release_version }}
          github_token: ${{ env.GITHUB_TOKEN }}
          commit_sha: ${{ env.RELEASE_COMMIT }}
          tag_prefix: ""

  release-result:
    runs-on: ubuntu-latest
    needs: [ release-version ]
    if: ${{ always() && inputs.release_version != '' }}
    outputs:
      release-result: ${{ steps.get_release_result.outputs.release_result }}
    steps:
      - name: get release result
        id: get_release_result
        run: |
          RELEASE_RESULT="error"
          if [[ "${{ needs.release-version.result }}" == "success" ]]; then
              RELEASE_RESULT="success"
          fi
          echo 'release_result='$RELEASE_RESULT >> $GITHUB_OUTPUT

  send-message:
    permissions:
      id-token: write
      contents: read
    needs: [ release-result ]
    if: ${{ always() && inputs.release_version != '' }}
    uses: apecloud-inc/apecloud-cd/.github/workflows/feishui-message.yml@v0.1.0
    with:
      TYPE: "2"
      CONTENT: "release cloud airgap:${{ inputs.release_version }} ${{ needs.release-result.outputs.release-result }}"
    secrets: inherit
