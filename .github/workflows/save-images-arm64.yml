name: Save Images Arm64

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: 'app name'
        required: true
        default: 'kubeblocks-enterprise'
        type: choice
        options:
          - kubeblocks-enterprise
          - kubeblocks-enterprise-patch
          - kubeblocks
          - kubeblocks-cloud
          - cert-manager
          - gemini
          - elasticsearch-arm
          - mysql-arm
          - mongodb-arm
          - damengdb-arm
          - clickhouse
          - gaussdb
          - greatdb
          - hadoop
          - hive
          - influxdb
          - etcd
          - kafka
          - kata
          - kubebench
          - loki
          - milvus
          - minio
          - metallb
          - mssql
          - nebula
          - oceanbase
          - postgresql
          - qdrant
          - redis
          - starrocks
          - ingress-nginx
          - ape-local-csi-driver
          - spiderpool
          - metrics-server
          - kubechat
          - postgres-operator
          - rabbitmq
          - rocketmq
          - zookeeper
          - kingbase
          - k3s
          - kubernetes
          - dify
          - tdengine
          - tidb
          - vastbase
          - victoria-metrics
          - csi-driver-nfs
          - dbdrag
          - pv-migrate
      APP_DIR:
        description: 'select addon dir'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - '0.9'
          - '1.0'
      APP_VERSION:
        description: 'app version'
        required: true
        default: ''
      ADD_IMAGES:
        description: 'additional images (e.g. docker.io/apecloud/kubeblocks:0.8.1)'
        required: false
        default: ''
      KB_VERSION:
        description: 'KubeBlocks version'
        required: false
        default: ''
      GEMINI_VERSION:
        description: 'Gemini '
        required: false
        default: ''
      OTELD_VERSION:
        description: 'Oteld version'
        required: false
        default: ''
      INSTALLER_VERSION:
        description: 'Offline Installer version'
        required: false
        default: ''
      DMS_VERSION:
        description: 'Dms version'
        required: false
        default: ''

run-name: save Arm64 ${{ inputs.APP_NAME }}:${{ inputs.APP_VERSION }} ${{ inputs.ADD_IMAGES }}

env:
  DOCKER_REGISTRY_URL: docker.io
  DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
  OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
  OSS_ENDPOINT: "oss-cn-zhangjiakou.aliyuncs.com"
  OSS_BUCKET: "kubeblocks-oss"

jobs:
  enable-self-runner:
    uses: apecloud-inc/apecloud-cd/.github/workflows/enable-self-runner.yml@v0.4.0
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "apecloud-inc/kubeblocks-airgap"
      RUNNER_LABEL: "kubeblocks-airgap-yq-arm-runner"
      RUNNER_REPLICAS: 1
    secrets: inherit

  save-app-images:
    needs: [ enable-self-runner ]
    name: save app images
    runs-on: [ self-hosted, arm-yq-runner ]
    outputs:
      runner-name: ${{ steps.get_runner_name.outputs.runner-name }}
    steps:
      - name: setup ossutil
        continue-on-error: true
        run: |
          sudo apt-get update
          sudo apt-get install unzip
          sudo -v ; curl https://gosspublic.alicdn.com/ossutil/install.sh | sudo bash

      - name: ossutil config
        env:
          OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
          OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
        run: |
          ossutil config --access-key-id="${{ env.OSS_KEY_ID }}" --access-key-secret="${{ env.OSS_KEY_SECRET }}" --endpoint="${{ env.OSS_ENDPOINT }}"

      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3

      - name: get cloud version
        if: ${{ inputs.APP_NAME == 'kubeblocks-enterprise' || inputs.APP_NAME == 'kubeblocks-cloud' || inputs.APP_NAME == 'kubeblocks-enterprise-patch' }}
        id: get-version
        run: |
          RELEASE_VERSION="${{ inputs.APP_VERSION }}"
          if [[ "${RELEASE_VERSION}" != "v"* ]]; then
              RELEASE_VERSION="v${RELEASE_VERSION}"
          fi
          echo "release-version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

      - name: get images file
        id: get-images-file
        run: |
          APP_DIR="${{ inputs.APP_DIR }}"
          APP_NAME="${{ inputs.APP_NAME }}"
          IMAGES_FILE=".github/images/${APP_NAME}.txt"
          if [[ -n "${APP_DIR}" ]]; then
              IMAGES_FILE=".github/images/${APP_DIR}/${APP_NAME}.txt"
          fi
          echo "images-file=${IMAGES_FILE}" >> $GITHUB_OUTPUT

      - name: Checkout apecloud Code
        uses: actions/checkout@v4
        if: ${{ inputs.APP_NAME == 'kubeblocks-enterprise' || inputs.APP_NAME == 'kubeblocks-cloud' || inputs.APP_NAME == 'kubeblocks-enterprise-patch' }}
        with:
          repository: apecloud/apecloud
          path: apecloud
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ steps.get-version.outputs.release-version }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: save images
        env:
          add_images: ${{ inputs.ADD_IMAGES }}
          app_name: ${{ inputs.APP_NAME }}
          app_version: ${{ inputs.APP_VERSION }}
          kubeblocks_version: ${{ inputs.KB_VERSION }}
          gemini_version: ${{ inputs.GEMINI_VERSION }}
          oteld_version: ${{ inputs.OTELD_VERSION }}
          installer_version: ${{ inputs.INSTALLER_VERSION }}
          dms_version: ${{ inputs.DMS_VERSION }}
          images_file: ${{ steps.get-images-file.outputs.images-file }}
        run: |
          bash .github/scripts/save_images.sh

      - name: get images size
        run: |
          docker images
          du -sh ${{ inputs.APP_NAME }}-${{ inputs.APP_VERSION }}.tar.gz 

      - name: Upload arm64 images to oss
        id: upload_to_oss
        run: |
          IMAGE_PKG_NAME="${{ inputs.APP_NAME }}-${{ inputs.APP_VERSION }}.tar.gz"
          IMAGE_PKG_NAME_ARM64="${{ inputs.APP_NAME }}-${{ inputs.APP_VERSION }}-arm64.tar.gz"
          mv ${IMAGE_PKG_NAME} ${IMAGE_PKG_NAME_ARM64}
          
          upload_ret=0
          for i in {1..10}; do
              echo "ossutil cp ${IMAGE_PKG_NAME_ARM64} to oss://${{ env.OSS_BUCKET }}/images/arm64/${IMAGE_PKG_NAME_ARM64} ..."
              ossutil cp -rf ./${IMAGE_PKG_NAME_ARM64} oss://${{ env.OSS_BUCKET }}/images/arm64/${IMAGE_PKG_NAME_ARM64}  --read-timeout=420 --retry-times=5
              upload_ret=$?
                
              if [[ -d "ossutil_output" ]]; then
                  ossutil_report_files=$(ls ossutil_output)
                  if [[ -n "${ossutil_report_files}" ]]; then
                      ossutil_report_file_name="$(ls ossutil_output/ossutil_report_*.report)"
                      if [[ -n "${ossutil_report_file_name}" && -f "${ossutil_report_file_name}" ]]; then
                          echo "cp ${IMAGE_PKG_NAME_ARM64} to oss error, retry..."
                          cat "${ossutil_report_file_name}"
                          rm -rf ossutil_output/ossutil_report_*.report
                          upload_ret=1
                      fi
                  fi
              fi
              if [[ $upload_ret -eq 0 ]]; then
                  break
              fi
              sleep 1
          done
          
          if [[ $upload_ret -eq 0 ]]; then
              echo "upload ${IMAGE_PKG_NAME_ARM64} to oss successfully"
          else
              exit 1
          fi
      
          IMAGE_PKG_NAME_MD="${IMAGE_PKG_NAME_ARM64}.md5"
          echo "upload ${IMAGE_PKG_NAME_MD} to oss ..."
          upload_ret=0
          for i in {1..10}; do
              md5sum ${IMAGE_PKG_NAME_ARM64} > ${IMAGE_PKG_NAME_MD}
              md5sum_check=$(md5sum -c ${IMAGE_PKG_NAME_MD})
              check_ret=$?
              if [[ $check_ret -eq 0 && "${md5sum_check}" == *"OK" ]]; then
                  echo "${md5sum_check}"
              else
                  sleep 1
                  continue
              fi
          
              echo "ossutil cp ${IMAGE_PKG_NAME_MD} to oss://${{ env.OSS_BUCKET }}/images/arm64/${IMAGE_PKG_NAME_MD} ..."
              ossutil cp -rf ./${IMAGE_PKG_NAME_MD} oss://${{ env.OSS_BUCKET }}/images/arm64/${IMAGE_PKG_NAME_MD}  --read-timeout=420 --retry-times=5
              upload_ret=$?
          
              if [[ -d "ossutil_output" ]]; then
                  ossutil_report_files=$(ls ossutil_output)
                  if [[ -n "${ossutil_report_files}" ]]; then
                      ossutil_report_file_name="$(ls ossutil_output/ossutil_report_*.report)"
                      if [[ -n "${ossutil_report_file_name}" && -f "${ossutil_report_file_name}" ]]; then
                          echo "cp ${IMAGE_PKG_NAME_MD} to oss error, retry..."
                          cat "${ossutil_report_file_name}"
                          rm -rf ossutil_output/ossutil_report_*.report
                          upload_ret=1
                      fi
                  fi
              fi
              if [[ $upload_ret -eq 0 ]]; then
                  break
              fi
              sleep 1
          done
          
          if [[ $upload_ret -eq 0 ]]; then
              echo "upload ${IMAGE_PKG_NAME_MD} to oss successfully"
          fi

      - name: get self runner name
        id: get_runner_name
        if: ${{ always() }}
        run: |
          echo runner-name=${RUNNER_NAME} >> $GITHUB_OUTPUT

  delete-self-runner:
    if: ${{ always() }}
    needs: [ save-app-images ]
    uses: apecloud-inc/apecloud-cd/.github/workflows/delete-self-runner.yml@v0.5.0
    with:
      RUNNER_NAME: "${{ needs.save-app-images.outputs.runner-name }}"
    secrets: inherit

  save-result:
    runs-on: ubuntu-latest
    needs: [ save-app-images ]
    if: ${{ always() }}
    outputs:
      image-pkg-name: ${{ steps.get_save_result.outputs.image_pkg_name }}
      save-result: ${{ steps.get_save_result.outputs.save_result }}
    steps:
      - name: get save result
        id: get_save_result
        run: |
          SAVE_RESULT="error"
          IMAGE_PKG_NAME_ARM64="${{ inputs.APP_NAME }}-${{ inputs.APP_VERSION }}-arm64.tar.gz"
          if [[ "${{ needs.save-app-images.result }}" == "success" ]]; then
              SAVE_RESULT="success"
              IMAGE_PKG_NAME_ARM64="http://kubeblocks-oss.${{ env.OSS_ENDPOINT }}/images/arm64/${IMAGE_PKG_NAME_ARM64}"
          fi
          echo 'save_result='$SAVE_RESULT >> $GITHUB_OUTPUT
          echo 'image_pkg_name='${IMAGE_PKG_NAME_ARM64} >> $GITHUB_OUTPUT

  send-message:
    permissions:
      id-token: write
      contents: read
    needs: [ save-result ]
    if: ${{ always() }}
    uses: apecloud-inc/apecloud-cd/.github/workflows/feishui-message.yml@v0.1.0
    with:
      TYPE: "2"
      CONTENT: "save image ${{ needs.save-result.outputs.image-pkg-name }} ${{ needs.save-result.outputs.save-result }}"
    secrets: inherit

  disable-self-runner:
    if: ${{ always() }}
    needs: [ save-app-images ]
    uses: apecloud-inc/apecloud-cd/.github/workflows/enable-self-runner.yml@v0.4.0
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "apecloud-inc/kubeblocks-airgap"
      RUNNER_LABEL: "kubeblocks-airgap-yq-arm-runner"
      ENABLE: "disable"
    secrets: inherit

  upload-md5-checksums:
    needs: [ save-app-images ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: auto release images
        run: |
          cmd="bash .github/scripts/trigger_workflow.sh "
          cmd=$cmd"--github-token \"${{ env.GITHUB_TOKEN }}\" "
          cmd=$cmd"--github-repo \"${{ github.repository }}\" "
          cmd=$cmd"--branch-name \"${{ github.ref_name }}\" "
          cmd=$cmd"--workflow-id \"save-md5-checksums.yml\" "
          
          APP_NAME="${{ inputs.APP_NAME }}"
          RELEASE_VERSION="${{ inputs.APP_VERSION }}"
          if [[ "${RELEASE_VERSION}" != "v"* ]]; then
              RELEASE_VERSION="v${RELEASE_VERSION}"
          fi
          if [[ "${APP_NAME}" == "kubeblocks-enterprise" && -n "${RELEASE_VERSION}" ]]; then
              cmd=$cmd"--version \"${RELEASE_VERSION}\" "
          fi
          
          echo "$cmd"
          eval "$cmd"

